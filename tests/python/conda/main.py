
# print("hello world! (conda)")

# –ë–∏–ª–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ python_run.sh
import os
import subprocess
import sys
import re

class CondaPythonBuilder:
    def __init__(self, script_path='./python_run.sh'):
        self.script_path = script_path
        self.supported_managers = ['requirements.txt', 'pyproject.toml', 'environment.yml']
    
    def check_file_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        exists = os.path.exists(self.script_path)
        return {
            'name': '–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞',
            'is_valid': exists,
            'message': '–§–∞–π–ª –Ω–∞–π–¥–µ–Ω' if exists else '–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        }
    
    def check_syntax(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ bash"""
        try:
            subprocess.run(['bash', '-n', self.script_path], 
                         check=True, capture_output=True)
            return {
                'name': '–°–∏–Ω—Ç–∞–∫—Å–∏—Å bash',
                'is_valid': True,
                'message': '–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
            }
        except subprocess.CalledProcessError as e:
            return {
                'name': '–°–∏–Ω—Ç–∞–∫—Å–∏—Å bash',
                'is_valid': False,
                'message': f'–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.stderr.decode().strip()}'
            }
    
    def check_shebang(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ shebang"""
        try:
            with open(self.script_path, 'r') as f:
                first_line = f.readline().strip()
            has_shebang = first_line == '#!/bin/bash'
            return {
                'name': 'Shebang',
                'is_valid': has_shebang,
                'message': 'Shebang –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if has_shebang else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç #!/bin/bash'
            }
        except Exception as e:
            return {
                'name': 'Shebang',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def check_set_e(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ set -e"""
        try:
            with open(self.script_path, 'r') as f:
                content = f.read()
            has_set_e = 'set -e' in content
            return {
                'name': 'set -e',
                'is_valid': has_set_e,
                'message': 'set -e –≤–∫–ª—é—á–µ–Ω' if has_set_e else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç set -e'
            }
        except Exception as e:
            return {
                'name': 'set -e',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def check_package_managers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            with open(self.script_path, 'r') as f:
                content = f.read()
            
            missing_managers = []
            for manager in self.supported_managers:
                if manager not in content:
                    missing_managers.append(manager)
            
            return {
                'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞–∫–µ—Ç–æ–≤',
                'is_valid': len(missing_managers) == 0,
                'message': '–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' if len(missing_managers) == 0 
                          else f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {", ".join(missing_managers)}'
            }
        except Exception as e:
            return {
                'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞–∫–µ—Ç–æ–≤',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def check_conda_section(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ü–∏–∏ conda"""
        try:
            with open(self.script_path, 'r') as f:
                content = f.read()
            
            conda_checks = [
                ('environment.yml', '–ü—Ä–æ–≤–µ—Ä–∫–∞ environment.yml'),
                ('apt-get update', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ apt'),
                ('curl miniconda', '–ó–∞–≥—Ä—É–∑–∫–∞ Miniconda'),
                ('bash miniconda.sh', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Miniconda'),
                ('conda env update', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ conda environment'),
                ('conda activate', '–ê–∫—Ç–∏–≤–∞—Ü–∏—è environment')
            ]
            
            missing = [name for check, name in conda_checks if check not in content]
            
            return {
                'name': '–°–µ–∫—Ü–∏—è conda',
                'is_valid': len(missing) == 0,
                'message': '–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã conda –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' if len(missing) == 0 
                          else f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {", ".join(missing)}'
            }
        except Exception as e:
            return {
                'name': '–°–µ–∫—Ü–∏—è conda',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def check_conda_safety(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ conda —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            with open(self.script_path, 'r') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ apt lists
            if 'rm -rf /var/lib/apt/lists/*' not in content:
                warnings.append('–ù–µ—Ç –æ—á–∏—Å—Ç–∫–∏ apt lists')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è miniconda.sh
            if 'rm miniconda.sh' not in content:
                warnings.append('–ù–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è miniconda.sh')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ environment
            if 'ENV_NAME=$(head -1 environment.yml | awk \'{print $2}\')' not in content:
                warnings.append('–ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ environment')
            
            return {
                'name': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å conda',
                'is_valid': len(warnings) == 0,
                'message': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if len(warnings) == 0 
                          else f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {", ".join(warnings)}'
            }
        except Exception as e:
            return {
                'name': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å conda',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def check_exec_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è exec"""
        try:
            with open(self.script_path, 'r') as f:
                content = f.read()
            
            has_exec = 'exec python main.py' in content
            return {
                'name': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ exec',
                'is_valid': has_exec,
                'message': 'exec –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ' if has_exec else '–ù–µ—Ç exec –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python'
            }
        except Exception as e:
            return {
                'name': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ exec',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def check_path_handling(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PATH"""
        try:
            with open(self.script_path, 'r') as f:
                content = f.read()
            
            has_path_export = 'export PATH="/opt/conda/bin:$PATH"' in content
            has_source = 'source /opt/conda/etc/profile.d/conda.sh' in content
            
            return {
                'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ PATH',
                'is_valid': has_path_export and has_source,
                'message': 'PATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ' if has_path_export and has_source 
                          else f'–ü—Ä–æ–±–ª–µ–º—ã —Å PATH: {"–Ω–µ—Ç export" if not has_path_export else ""} {"–Ω–µ—Ç source" if not has_source else ""}'
            }
        except Exception as e:
            return {
                'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ PATH',
                'is_valid': False,
                'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}'
            }
    
    def print_summary(self, results):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ python_run.sh:\n')
        
        for result in results:
            icon = '‚úÖ' if result['is_valid'] else '‚ùå'
            print(f"{icon} {result['name']}: {result['message']}")
        
        valid_count = sum(1 for r in results if r['is_valid'])
        total_count = len(results)
        
        print(f'\nüìà –ò—Ç–æ–≥: {valid_count}/{total_count} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ')
        
        if valid_count == total_count:
            print('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        else:
            print('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:')
            for result in results:
                if not result['is_valid']:
                    print(f'   - {result["name"]}: {result["message"]}')
    
    def build(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print(f'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: {self.script_path}\n')
        
        if not os.path.exists(self.script_path):
            print('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return False
        
        checks = [
            self.check_file_exists(),
            self.check_syntax(),
            self.check_shebang(),
            self.check_set_e(),
            self.check_package_managers(),
            self.check_conda_section(),
            self.check_conda_safety(),
            self.check_exec_usage(),
            self.check_path_handling()
        ]
        
        self.print_summary(checks)
        
        return all(check['is_valid'] for check in checks)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
def check_python_run_sh():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ python_run.sh"""
    builder = CondaPythonBuilder('./python_run.sh')
    success = builder.build()
    
    if success:
        print('\nüöÄ python_run.sh –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å conda!')
    else:
        print('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ python_run.sh')
    
    return success

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("hello world! (conda)")
    print("\n" + "="*50)
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if len(sys.argv) > 1 and sys.argv[1] == '--check':
        success = check_python_run_sh()
        sys.exit(0 if success else 1)
    else:
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        print("–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ python_run.sh –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py --check")