// shellcheck-builder-specific.js
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class SpecificJavaScriptSHBuilder {
  constructor(scriptPath = './java_script_run.sh') {
    this.scriptPath = scriptPath;
    this.expectedFrameworks = ['next', 'nuxt', '@angular/core', 'vue', 'react'];
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  async build() {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: ${this.scriptPath}\n`);
    
    if (!fs.existsSync(this.scriptPath)) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    const checks = [
      this.checkFileExists(),
      this.checkShellCheck(),
      this.checkSyntax(),
      this.checkShebang(),
      this.checkSetE(),
      this.checkPackageJsonValidation(),
      this.checkFrameworkDetection(),
      this.checkNpmCommands(),
      this.checkExecUsage(),
      this.checkErrorHandling()
    ];

    const results = await Promise.all(checks);
    const allValid = results.every(result => result.isValid);

    this.printSummary(results);
    return allValid;
  }

  checkFileExists() {
    return {
      name: '–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞',
      isValid: fs.existsSync(this.scriptPath),
      message: fs.existsSync(this.scriptPath) ? '–§–∞–π–ª –Ω–∞–π–¥–µ–Ω' : '–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    };
  }

  checkShellCheck() {
    try {
      execSync(`shellcheck "${this.scriptPath}"`, { stdio: 'pipe' });
      return {
        name: 'ShellCheck –ø—Ä–æ–≤–µ—Ä–∫–∞',
        isValid: true,
        message: 'ShellCheck –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      };
    } catch (error) {
      return {
        name: 'ShellCheck –ø—Ä–æ–≤–µ—Ä–∫–∞',
        isValid: false,
        message: `ShellCheck –æ—à–∏–±–∫–∏: ${error.stdout.toString().trim()}`
      };
    }
  }

  checkSyntax() {
    try {
      execSync(`bash -n "${this.scriptPath}"`, { stdio: 'pipe' });
      return {
        name: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å bash',
        isValid: true,
        message: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      };
    } catch (error) {
      return {
        name: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å bash',
        isValid: false,
        message: `–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`
      };
    }
  }

  checkShebang() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const hasShebang = content.startsWith('#!/bin/bash');
    return {
      name: 'Shebang',
      isValid: hasShebang,
      message: hasShebang ? 'Shebang –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç #!/bin/bash'
    };
  }

  checkSetE() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const hasSetE = content.includes('set -e');
    return {
      name: 'set -e',
      isValid: hasSetE,
      message: hasSetE ? 'set -e –≤–∫–ª—é—á–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç set -e –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'
    };
  }

  checkPackageJsonValidation() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const hasPackageJsonCheck = content.includes('[ ! -f package.json ]') || 
                               content.includes('if [ ! -f package.json ]');
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ package.json',
      isValid: hasPackageJsonCheck,
      message: hasPackageJsonCheck ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ package.json –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è package.json'
    };
  }

  checkFrameworkDetection() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const missingFrameworks = this.expectedFrameworks.filter(framework => 
      !content.includes(`"${framework}"`)
    );
    
    return {
      name: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤',
      isValid: missingFrameworks.length === 0,
      message: missingFrameworks.length === 0 ? 
        '–í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' : 
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è: ${missingFrameworks.join(', ')}`
    };
  }

  checkNpmCommands() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const hasNpmInstall = content.includes('npm install');
    const hasBuildCommands = content.includes('npm run build') || content.includes('yarn build');
    
    return {
      name: 'NPM –∫–æ–º–∞–Ω–¥—ã',
      isValid: hasNpmInstall && hasBuildCommands,
      message: hasNpmInstall && hasBuildCommands ? 
        'NPM –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' : 
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${!hasNpmInstall ? 'npm install' : ''} ${!hasBuildCommands ? 'build –∫–æ–º–∞–Ω–¥—ã' : ''}`
    };
  }

  checkExecUsage() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const execCount = (content.match(/exec /g) || []).length;
    return {
      name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ exec',
      isValid: execCount > 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${execCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π exec (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞)`
    };
  }

  checkErrorHandling() {
    const content = fs.readFileSync(this.scriptPath, 'utf8');
    const hasExit1 = content.includes('exit 1');
    return {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
      isValid: hasExit1,
      message: hasExit1 ? '–ï—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (exit 1)' : '–ù–µ—Ç —è–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'
    };
  }

  printSummary(results) {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n');
    
    results.forEach(result => {
      const icon = result.isValid ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${result.name}: ${result.message}`);
    });

    const validCount = results.filter(r => r.isValid).length;
    const totalCount = results.length;
    
    console.log(`\nüìà –ò—Ç–æ–≥: ${validCount}/${totalCount} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (validCount === totalCount) {
      console.log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞:');
      results.filter(r => !r.isValid).forEach(result => {
        console.log(`   - ${result.name}: ${result.message}`);
      });
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async function main() {
  const builder = new SpecificJavaScriptSHBuilder('./java_script_run.sh');
  const success = await builder.build();
  
  process.exit(success ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = SpecificJavaScriptSHBuilder;